import csv
import json
import os
import requests
import datetime
from os.path import exists
from flask import Flask

app = Flask(__name__)
jsonString = []
packages = ["LangChain", "NLTK", "TextBlob", "Gensim", "Memray", "Codon", "PyTesseract", "wxPython", "Pygame", "Pyglet",
            "PyOpenGL", "Requests", "Scrapy", "BeautifulSoup", "Django", "Flask", "Pandas", "Matplotlib", "Plotly",
            "Bokeh",
            "SQLAlchemy", "Numpy", "SciPy", "SymPy", "Keras", "Tensorflow", "PyTorch", "Scikit-Learn",
            "Imbalanced-learn", "Theano",
            "LightGBM", "Eli5", "PySoundFile", "fugue", "PyWin32", "Py2exe", "Py2App", "PyObjC", "PyUSB", "PySerial",
            "Seaborn", "IPython", "Poetry", "Kivy", "Pendulum", "Loguru", "Pipenv", "Pytest", "MoviePy", "Ruff"]


@app.route("/sortName")
def orderByName():
    sorted_data = sorted(jsonString, key=lambda x: x["Nome"])
    json_data = json.dumps(sorted_data, indent=4)
    loader = json.loads(json_data)
    text = ""
    for i in loader:
        text += "Nome: " + i["Nome"] + ", Data de Lancamento: " + i["Data de Lancamento"] + ", Versao do Python: " + i[
            "Versao do Python"] + ", Quantidade de downloads no utimo mes: " + i[
                    "Quantidade de downloads no utimo mes"] + "<br><br>"
    return text


@app.route("/sortRelease")
def orderByRelease():
    sorted_data = sorted(jsonString, key=lambda x: x["Data de Lancamento"])
    json_data = json.dumps(sorted_data, indent=4)
    loader = json.loads(json_data)
    text = ""
    for i in loader:
        text += "Nome: " + i["Nome"] + ", Data de Lancamento: " + i["Data de Lancamento"] + ", Versao do Python: " + i[
            "Versao do Python"] + ", Quantidade de downloads no utimo mes: " + i[
                    "Quantidade de downloads no utimo mes"] + "<br><br>"
    return text


@app.route("/sortVersion")
def orderByVersion():
    sorted_data = sorted(jsonString, key=lambda x: x["Versao do Python"])
    json_data = json.dumps(sorted_data, indent=4)
    loader = json.loads(json_data)
    text = ""
    for i in loader:
        text += "Nome: " + i["Nome"] + ", Data de Lancamento: " + i["Data de Lancamento"] + ", Versao do Python: " + i[
            "Versao do Python"] + ", Quantidade de downloads no utimo mes: " + i[
                    "Quantidade de downloads no utimo mes"] + "<br><br>"
    return text


@app.route("/sortDownload")
def orderByDownload():
    sorted_data = sorted(jsonString, key=lambda x: x["Quantidade de downloads no utimo mes"])
    json_data = json.dumps(sorted_data, indent=4)
    loader = json.loads(json_data)
    text = ""
    for i in loader:
        text += "Nome: " + i["Nome"] + ", Data de Lancamento: " + i["Data de Lancamento"] + ", Versao do Python: " + i[
            "Versao do Python"] + ", Quantidade de downloads no utimo mes: " + i[
                    "Quantidade de downloads no utimo mes"] + "<br><br>"
    return text


def readCSV():
    if exists("packages - Apollo Exercise.csv"):
        f = open("packages - Apollo Exercise.csv", 'r', newline='')
        reader = csv.reader(f, delimiter=';')
        next(reader)
        for line in reader:
            j = {"Nome": line[0], "Data de Lancamento": line[1], "Versao do Python": line[2],
                 "Quantidade de downloads no utimo mes": line[3]}
            jsonString.append(j);
        f.close()


def createCSV():
    if not exists("packages - Apollo Exercise.csv"):
        f = open("packages - Apollo Exercise.csv", 'w', newline='')
        writer = csv.writer(f, delimiter=';')
        writer.writerow(["Nome", "Data de Lancamento", "Versao do Python", "Quantidade de downloads no utimo mes"])
        f.close()


def writeCSV(nome, data, versao, downloads):
    f = open("packages - Apollo Exercise.csv", 'a', newline='', errors='ignore')
    writer = csv.writer(f, delimiter=';')
    writer.writerow([nome, data, versao, downloads])
    f.close()


def convertDate(date_raw):
    new_format = "%d/%m/%Y"
    date = datetime.datetime.strptime(date_raw, "%Y-%m-%dT%H:%M:%S").strftime(new_format)
    return date


def run():
    if exists("packages - Apollo Exercise.csv"):
        os.remove("packages - Apollo Exercise.csv")

    createCSV()

    for i in packages:
        response = requests.get("https://pypi.org/pypi/" + i + "/json")
        data = response.json()
        info = data['info']
        releases = data['releases']
        release_element = releases[list(releases)[-1]]
        release_cell = release_element[0]
        release_date = convertDate(release_cell['upload_time'])
        release_versao = release_cell['python_version']
        downloads = info['downloads']
        writeCSV(info['name'], release_date, release_versao, downloads['last_month'])

    readCSV()

run()

app.run(port=5000, host="localhost")
